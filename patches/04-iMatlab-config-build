Index: MOOS/CMakeLists.txt
===================================================================
--- MOOS/CMakeLists.txt	(revision 4566)
+++ MOOS/CMakeLists.txt	(working copy)
@@ -255,3 +255,9 @@
   export(PACKAGE MOOS)
 endif("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" GREATER 2.7)
 
+###############################################################################
+# configure script for building iMatlab using matlab
+configure_file(${CMAKE_SOURCE_DIR}/Tools/Matlab/iMatlab/build_iMatlab.m.in ${CMAKE_SOURCE_DIR}/Tools/Matlab/iMatlab/build_iMatlab.m @ONLY)
+
+# install iMatlab source to allow user to build from DFSG package
+install(DIRECTORY ${CMAKE_SOURCE_DIR}/Tools/Matlab/iMatlab DESTINATION ${CMAKE_INSTALL_PREFIX}/share/moos FILES_MATCHING REGEX ".*\\.h$|.*\\.cpp$|.*\\.m$" PATTERN "CMakeFiles" EXCLUDE PATTERN ".svn" EXCLUDE )
Index: MOOS/Tools/Matlab/iMatlab/build_iMatlab.m.in
===================================================================
--- MOOS/Tools/Matlab/iMatlab/build_iMatlab.m.in	(revision 0)
+++ MOOS/Tools/Matlab/iMatlab/build_iMatlab.m.in	(revision 0)
@@ -0,0 +1,26 @@
+% same as CMAKE_INSTALL_PREFIX when building MOOS
+% packages will use '/usr', default source builds use '/usr/local'
+moos_install_prefix='@CMAKE_INSTALL_PREFIX@'; 
+disp(['Using moos installed in: ' moos_install_prefix]);
+% full path to the current matlab installation (matlabroot should give
+% this), e.g. /usr/local/MATLAB/R2011a
+matlab_prefix = matlabroot;
+matlab_include= [matlab_prefix '/extern/include'];
+% you may need to chown output_directory for it to be writable
+% e.g. "sudo chown toby:toby /usr/local/MATLAB/R2011a/toolbox/local"
+output_directory= [matlab_prefix '/toolbox/local'];
+disp(['Writing iMatlab MEX to: ' output_directory]);
+
+
+params = [ moos_install_prefix '/share/moos/iMatlab/iMatlab.cpp ' ...
+    moos_install_prefix '/share/moos/iMatlab/mexVNLHelpers.cpp ' ...
+    moos_install_prefix '/lib/libMOOS.a ' ...
+    moos_install_prefix '/lib/libMOOSGen.a ' ...
+    moos_install_prefix '/lib/libMOOSUtility.a ' ...
+    '-I' moos_install_prefix '/include ' ...
+    '-I' moos_install_prefix '/share/moos/iMatlab ' ...
+    '-I' matlab_include ' ' ...
+    '-outdir ' output_directory ];
+
+eval(['mex ' params]);
+disp(['Success... Make sure "' output_directory '" is on your Matlab path.']);
Index: MOOS/Tools/Matlab/iMatlab/iMatlab.cpp
===================================================================
--- MOOS/Tools/Matlab/iMatlab/iMatlab.cpp	(revision 4566)
+++ MOOS/Tools/Matlab/iMatlab/iMatlab.cpp	(working copy)
@@ -250,7 +250,7 @@
 
 
 //called the fist time iMatlab runs or when 'init' is passed as the first parameter
-bool Initialise(const mxArray *prhs[], int nrhs)
+bool Initialise(int nlhs, mxArray *plhs[], const mxArray *prhs[], int nrhs)
 {
     
     if(bInitialised)
@@ -390,8 +390,52 @@
             }
         }
     }
+
+    // tes 2012-06-20 - write iMatlab configuration to return value [config] = iMatlab('init', ... );
+    if(nlhs == 1)
+    {
+        // transform STRING_LIST into map of key onto values
+        std::map<std::string, std::vector<std::string> > params;
+        for (STRING_LIST::const_iterator it = ConfigFileParams.begin(),
+                 end = ConfigFileParams.end();
+             it != end; ++it)
+        {
+            std::string::size_type eq_pos = it->find("=");
+            std::string key = it->substr(0, eq_pos);
+            std::string value = (eq_pos != std::string::npos && eq_pos+1 < it->size()) ? it->substr(eq_pos+1) : "";
+
+            params[key].push_back(value);
+        }        
+
+        const int NUMBER_OF_STRUCTS = 1;
+        const int NUMBER_OF_FIELDS = params.size();
+        mwSize dims[2] = {1, NUMBER_OF_STRUCTS };
+
+        std::vector<const char *> field_names;
+        for(std::map<std::string, std::vector<std::string> >::const_iterator it =
+                params.begin(), end = params.end(); it != end; ++it)
+        {
+            field_names.push_back(it->first.c_str());
+        }        
+        plhs[0] = mxCreateStructArray(2, dims, NUMBER_OF_FIELDS, &field_names[0]);
+        
+        for(std::map<std::string, std::vector<std::string> >::const_iterator it =
+                params.begin(), end = params.end(); it != end; ++it)
+        {
+            int field = mxGetFieldNumber(plhs[0],it->first.c_str());
+            
+            std::vector<const char *> values;
+            for(std::vector<std::string>::const_iterator jt = it->second.begin(),
+                    endj = it->second.end(); jt != endj; ++jt)
+            {
+                values.push_back(jt->c_str());
+            }
+            mxSetFieldByNumber(plhs[0],0,field,mxCreateCharMatrixFromStrings(values.size(), &values[0]));
+        }        
+        
+    }
+
     
-    
     std::string sBool;
     
     //DO WE WANT MOOS COMMS?
@@ -543,7 +587,7 @@
     
     if(MOOSStrCmp(sCmd,"INIT"))
     {
-        Initialise(prhs,nrhs);
+        Initialise(nlhs, plhs, prhs,nrhs);
     }
     else
     {
