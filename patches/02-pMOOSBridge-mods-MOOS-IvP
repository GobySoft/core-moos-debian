--- a/Essentials/MOOSUtilityLib/MOOSGeodesy.cpp
+++ b/Essentials/MOOSUtilityLib/MOOSGeodesy.cpp
@@ -71,6 +71,16 @@
     SetOriginLongitude(0.0);
     SetOriginLatitude(0.0);
     
+    // Initialize member variables (mikerb 3/17/11)
+    m_iRefEllipsoid    = 23;
+    m_dOriginEasting   = 0;
+    m_dOriginNorthing  = 0;
+    m_dEast            = 0;
+    m_dNorth           = 0;
+    m_dOriginLongitude = 0;
+    m_dOriginLatitude  = 0;
+    m_dLocalGridX      = 0;
+    m_dLocalGridY      = 0;
 }
 
 CMOOSGeodesy::~CMOOSGeodesy()
@@ -197,7 +207,8 @@
     LongOriginRad = LongOrigin * deg2rad;
 
     //compute the UTM Zone from the latitude and longitude
-    sprintf(UTMZone, "%d%c", ZoneNumber, UTMLetterDesignator(Lat));
+    if(UTMZone) // mikerb
+      sprintf(UTMZone, "%d%c", ZoneNumber, UTMLetterDesignator(Lat));
 
     eccPrimeSquared = (eccSquared)/(1-eccSquared);
 
@@ -330,9 +341,8 @@
     double dN = 0.0, dE = 0.0; 
     char tmpUTM[4];
 
-    
-
-    LLtoUTM(m_iRefEllipsoid,lat,lon,tmpNorth,tmpEast,tmpUTM);
+    // LLtoUTM(m_iRefEllipsoid,lat,lon,tmpNorth,tmpEast,tmpUTM);
+    LLtoUTM(m_iRefEllipsoid,lat,lon,tmpNorth,tmpEast,0); // mikerb
 
     //could check for the UTMZone differing, and if so, return false
 
--- a/Essentials/MOOSUtilityLib/MOOSGeodesy.h
+++ b/Essentials/MOOSUtilityLib/MOOSGeodesy.h
@@ -88,7 +88,7 @@
     void SetOriginEasting(double East);
 
     void SetOriginNorthing(double North);
-    bool LLtoUTM(int ReferenceEllipsoid, const double Lat, const double Long, double &UTMNorthing, double &UTMEasting, char* UTMZone);
+    bool LLtoUTM(int ReferenceEllipsoid, const double Lat, const double Long, double &UTMNorthing, double &UTMEasting, char* UTMZone=0);
     void SetMetersEast(double East);
     void SetMetersNorth(double North);
     char UTMLetterDesignator(double Lat);
--- a/Essentials/pMOOSBridge/MOOSBridge.cpp
+++ b/Essentials/pMOOSBridge/MOOSBridge.cpp
@@ -46,402 +46,450 @@
 
 CMOOSBridge::CMOOSBridge()
 {
-    m_nBridgeFrequency    = DEFAULT_BRIDGE_FREQUENCY;
-    m_sLocalCommunity = "#1";
+  m_nBridgeFrequency = DEFAULT_BRIDGE_FREQUENCY;
+  m_sLocalCommunity  = "#1";
+  m_bAllowLoopBack   = false;
 }
 
-CMOOSBridge::~CMOOSBridge()
+//----------------------------------------------------------------
+// Procedure: OnNewMail
+
+bool CMOOSBridge::OnNewMail(MOOSMSG_LIST &NewMail)
 {
-    
+  cout << "In OnNewMail!!!!!!!!!!!!!!!!!!!" << endl;
+  MOOSMSG_LIST::iterator p;
+  for(p=NewMail.begin(); p!=NewMail.end(); p++) {
+    CMOOSMsg &msg = *p;
+
+    string moosvar = msg.GetKey();
+    string sval    = msg.GetString();
+
+    // Example String "src_var=DB_CLIENTS,dest_community=henry,
+    //    dest_host=128.30.24.246,dest_port=9201,dest_alias=BAR"
+    if(moosvar == "PMB_REGISTER") {
+      string src_var, dest_community, dest_host, dest_port, dest_alias;
+      while(sval != "") {
+	string pair = MOOSChomp(sval,",");
+	string left = MOOSChomp(pair,"=");
+	string right = pair;
+	if(left == "SrcVarName")
+	  src_var = right;
+	else if(left == "DestCommunity")
+	  dest_community = right;
+	else if(left == "DestCommunityHost")
+	  dest_host = right;
+	else if(left == "DestCommunityPort")
+	  dest_port = right;
+	else if(left == "DestVarName")
+	  dest_alias = right;
+      }
+      string sSrcCommunity = m_sLocalCommunity ;
+      string sLocalHost = "LOCALHOST";
+      string sLocalPort = "9000";
+      bool ok = ConfigureLine(m_sLocalCommunity, "LOCALHOST", "9000",
+			      src_var, dest_community, dest_host,
+			      dest_port, dest_alias);
+      if(ok)
+	MOOSTrace("New Registration Successful!! \n");
+      else
+	MOOSTrace("New Registration Failed!! \n");
+    }
+  }
+  return(true);
 }
 
-bool CMOOSBridge::Run(const string &sMissionFile,const string & sMOOSName)
+//----------------------------------------------------------------------
+// Procedure: Iterate
+
+bool CMOOSBridge::Iterate()
 {
-    if(!m_MissionReader.SetFile(sMissionFile))
-        return false;
-    
-    m_MissionReader.SetAppName(sMOOSName);
-    
-    if(!Configure())
-    {
-        return MOOSFail("MOOSBridge failed to configure itself - probably a configuration block error\n");;
-    }
-    while(1)
-    {
-        MarshallLoop();
-        MOOSPause(50);
-    }
-    return true;
+  MarshallLoop();
+  MOOSPause(50);
+  return true;
+}
+
+//----------------------------------------------------------------
+// Procedure: OnStartUp
+
+bool CMOOSBridge::OnStartUp()
+{
+  if(!Configure())
+    return MOOSFail("MOOSBridge failed to configure itself - probably a configuration block error\n");;
+
+  RegisterVariables();
+  return(true);
+}
+
+//----------------------------------------------------------------
+// Procedure: OnConnectToServer
+
+bool CMOOSBridge::OnConnectToServer()
+{
+  RegisterVariables();
+  return(true);
+}
+
+
+//----------------------------------------------------------------
+// Procedure: RegisterVariables
+
+void CMOOSBridge::RegisterVariables()
+{
+  m_Comms.Register("PMB_REGISTER", 0);
 }
 
 
+//----------------------------------------------------------------------
+// Procedure: MarshallLoop
+
 bool CMOOSBridge::MarshallLoop()
 {
-    COMMUNITY_MAP::iterator p,q;
-    MOOSMSG_LIST InMail;
-    for(p = m_Communities.begin();p!=m_Communities.end();p++)
-    {
-        CMOOSCommunity* pSrcCommunity = (p->second);
-        
-        if(pSrcCommunity->Fetch(InMail))
-        {
-            int nMail = InMail.size();
-            for(q = m_Communities.begin();q!=m_Communities.end();q++)
-            {
-                CMOOSCommunity* pDestCommunity = q->second;
-                if(pDestCommunity!=pSrcCommunity)
-                {
-                    MOOSMSG_LIST::iterator w;
-                    for(w = InMail.begin();w!=InMail.end();w++)
-                    {
-                        
-                        CMOOSCommunity::SP Index(w->GetKey(),pSrcCommunity->GetCommunityName() );
-                        
-                        if(pDestCommunity->WantsToSink(Index))
-                        {    
-                            //decrement mail count
-                            nMail--;
-                            
-                            CMOOSMsg MsgCopy = *w;
-                            MsgCopy.m_sKey = pDestCommunity->GetAlias(Index);
-                            if(IsUDPShare(Index))
-                            {
-                                if(pDestCommunity->HasUDPConfigured())
-                                {
+  COMMUNITY_MAP::iterator p,q;
+  MOOSMSG_LIST InMail;
+  for(p = m_Communities.begin();p!=m_Communities.end();p++) {
+    CMOOSCommunity* pSrcCommunity = (p->second);
+
+    if(pSrcCommunity->Fetch(InMail)) {
+      int nMail = InMail.size();
+      for(q = m_Communities.begin();q!=m_Communities.end();q++) {
+	CMOOSCommunity* pDestCommunity = q->second;
+	if(pDestCommunity!=pSrcCommunity) {
+	  MOOSMSG_LIST::iterator w;
+	  for(w = InMail.begin();w!=InMail.end();w++) {
+	    CMOOSCommunity::SP Index(w->GetKey(),
+				     pSrcCommunity->GetCommunityName() );
+
+	    if(pDestCommunity->WantsToSink(Index))  {
+	      //decrement mail count
+	      nMail--;
+
+	      CMOOSMsg MsgCopy = *w;
+	      MsgCopy.m_sKey = pDestCommunity->GetAlias(Index);
+	      if(IsUDPShare(Index))
+		{
+		  if(pDestCommunity->HasUDPConfigured())
+		    {
 #if(BOUNCE_WITH_GUSTO) 
-                                    MOOSTrace("UDP posting %s to community %s@%s:%d as %s (source community is %s)\n",
-                                              w->GetKey().c_str(),
-                                              pDestCommunity->GetCommunityName().c_str(),
-                                              pDestCommunity->GetUDPHost().c_str(),
-                                              pDestCommunity->GetUDPPort(),                                              
-                                              MsgCopy.m_sKey.c_str(),
-                                              w->GetCommunity().c_str());
+		      MOOSTrace("UDP posting %s to community %s@%s:%d as %s (source community is %s)\n",
+				w->GetKey().c_str(),
+				pDestCommunity->GetCommunityName().c_str(),
+				pDestCommunity->GetUDPHost().c_str(),
+				pDestCommunity->GetUDPPort(),
+				MsgCopy.m_sKey.c_str(),
+				w->GetCommunity().c_str());
 #endif
-                                    
-                                    //Send via UDP (directed to  single machine and port) - fire and forget...
-                                	m_UDPLink.Post(MsgCopy,pDestCommunity->GetUDPHost(),pDestCommunity->GetUDPPort());
-									                                }
-                                else
-                                {
-                                    MOOSTrace("cannot send %s via UDP to %s - destination community has no UDP port\n",MsgCopy.m_sKey.c_str(),pDestCommunity->GetFormattedName().c_str());
-                                }
-                            }
-                            else
-                            {
-                            	pDestCommunity->Post(MsgCopy);
-                            }
+
+		      //Send via UDP (directed to  single machine and port) - fire and forget...
+		      m_UDPLink.Post(MsgCopy,pDestCommunity->GetUDPHost(),pDestCommunity->GetUDPPort());
+		    }
+		  else
+		    {
+		      MOOSTrace("cannot send %s via UDP to %s - destination community has no UDP port\n",MsgCopy.m_sKey.c_str(),pDestCommunity->GetFormattedName().c_str());
+		    }
+		}
+	      else
+		{
+		  pDestCommunity->Post(MsgCopy);
+		}
 #if(BOUNCE_WITH_GUSTO)  
-                            MOOSTrace("Bouncing %s in %s -> %s on %s t = %f\n",
-                                      w->GetKey().c_str(),
-                                      pSrcCommunity->GetFormattedName().c_str(),
-                                      MsgCopy.GetKey().c_str(),
-                                      pDestCommunity->GetFormattedName().c_str(),
-                                      MsgCopy.GetTime());
+	      MOOSTrace("Bouncing %s in %s -> %s on %s t = %f\n",
+			w->GetKey().c_str(),
+			pSrcCommunity->GetFormattedName().c_str(),
+			MsgCopy.GetKey().c_str(),
+			pDestCommunity->GetFormattedName().c_str(),
+			MsgCopy.GetTime());
 #endif
-                        }
-                    }
-                }
-            }
-            //here we could look for broadcasts...
-        }
+	    }
+	  }
+	}
+      }
+      //here we could look for broadcasts...
     }
-    
-    
-    //have we received any UDP mail? if so it was meant for our own DB
-    //remember if UDP is being used there MUST be one MOOSBridge per community
-    MOOSMSG_LIST UDPMail;
-    
-	if(m_UDPLink.Fetch(UDPMail))
+  }
+
+
+  //have we received any UDP mail? if so it was meant for our own DB
+  //remember if UDP is being used there MUST be one MOOSBridge per community
+  MOOSMSG_LIST UDPMail;
+
+  if(m_UDPLink.Fetch(UDPMail))
     {
-        //find our local community
-        
-        COMMUNITY_MAP::iterator qq = m_Communities.find(m_sLocalCommunity );
-        if(qq!=m_Communities.end())
+      //find our local community
+
+      COMMUNITY_MAP::iterator qq = m_Communities.find(m_sLocalCommunity );
+      if(qq!=m_Communities.end())
         {
-            CMOOSCommunity * pLocalCommunity = qq->second;
+	  CMOOSCommunity * pLocalCommunity = qq->second;
             MOOSMSG_LIST::iterator p;
             for(p = UDPMail.begin();p!=UDPMail.end();p++)
-            {
+	      {
 #if(BOUNCE_WITH_GUSTO) 
                 MOOSTrace("Received %s from %s on UDP  - inserting into %s\n",p->GetKey().c_str(), p->GetCommunity().c_str(),pLocalCommunity->GetFormattedName().c_str());
 #endif
-                
+
                 //now be careful we aren't looking to subscribing for this mail....now that would be some horrible positive
                 //feedback loop! Can alos check as mikerb suggess on source community - it must not
                 //be us!
                 
                 if(!pLocalCommunity->HasMOOSSRegistration(p->GetKey()) && pLocalCommunity->GetCommunityName()!= p->GetCommunity() )
-                {
-                	pLocalCommunity->Post(*p);
-                }
+		  {
+		    pLocalCommunity->Post(*p);
+		  }
                 else
-                {
+		  {
                     
-                	MOOSTrace("no way!\n");
-                }
-            }
+		    MOOSTrace("no way!\n");
+		  }
+	      }
         }
-        
+
     }
-    
-    return true;
+
+  return true;
 }
 
+//----------------------------------------------------------------------
+// Procedure: IsUDPShare
+
 bool CMOOSBridge::IsUDPShare(CMOOSCommunity::SP & Index)
 {
-    return !m_UDPShares.empty() && m_UDPShares.find(Index)!=m_UDPShares.end();
+  return !m_UDPShares.empty() && m_UDPShares.find(Index)!=m_UDPShares.end();
 }
 
+//----------------------------------------------------------------------
+// Procedure: Configure
+
 bool CMOOSBridge::Configure()
 {
     STRING_LIST sParams;
-    
     if(!m_MissionReader.GetConfiguration(m_MissionReader.GetAppName(),sParams))
-        return MOOSFail("ERROR - Could not find a configuration block called %s \n",m_MissionReader.GetAppName().c_str()) ;
-    
-    //if user set LOOPBACK = TRUE then both src and destination communities can be identical
-    //default is FALSE this means if src=dest then the bridging will be ignored
-    bool bAllowLoopBack = false;
-    m_MissionReader.GetConfigurationParam("LOOPBACK",bAllowLoopBack);
+      return MOOSFail("ERROR - Could not find a configuration block called %s \n",
+		      m_MissionReader.GetAppName().c_str()) ;
     
+    //if user set LOOPBACK = TRUE then both src and destination
+    //communities can be identical default is FALSE this means if
+    //src=dest then the bridging will be ignored
+    m_MissionReader.GetConfigurationParam("LOOPBACK",m_bAllowLoopBack);
     
     //capture default file scope settings - maybe useful later
     string sLocalHost = "LOCALHOST";
     string sLocalPort = "9000";
     
     if(!m_MissionReader.GetValue("COMMUNITY",m_sLocalCommunity))
-    {
-        MOOSTrace("WARNING : Cannot read ::MOOS-scope variable COMMUNITY - assuming %s\n",m_sLocalCommunity.c_str());
-    }
+      MOOSTrace("WARNING : Cannot read ::MOOS-scope variable COMMUNITY - assuming %s\n",
+		m_sLocalCommunity.c_str());
     
     if(!m_MissionReader.GetValue("SERVERPORT",sLocalPort))
-    {
-        MOOSTrace("WARNING :Cannot read ::MOOS-scope variable SERVERPORT - assuming %s\n",sLocalPort.c_str());
-    }
+      MOOSTrace("WARNING :Cannot read ::MOOS-scope variable SERVERPORT - assuming %s\n",
+		sLocalPort.c_str());
     
     if(!m_MissionReader.GetValue("SERVERHOST",sLocalHost))
-    {
-        MOOSTrace("WARNING :Cannot read ::MOOS-scope variable SERVERHOST - assuming %s\n",sLocalHost.c_str());
-    }
+      MOOSTrace("WARNING :Cannot read ::MOOS-scope variable SERVERHOST - assuming %s\n",
+		sLocalHost.c_str());
     
     //how fast should the bridge operate in Hz (setting this to zero is a special case and
     //makes all registrations with dfPeriod = 0)
     m_nBridgeFrequency = DEFAULT_BRIDGE_FREQUENCY;
     m_MissionReader.GetConfigurationParam("BridgeFrequency",m_nBridgeFrequency);
-    
-    
+
     STRING_LIST::iterator q;
     
-    for(q = sParams.begin();q!=sParams.end();q++)
-    {
-        string sLine = *q;
-        //NB is alias's aren't specified the sink name is the source name
-        //also you don't need as many alias's as sources...
-        //SHARE = COMMUNITYNAME@HOSTNAME:PORT [VAR1,VAR2,VAR3,....] -> COMMUNITYNAME@HOSTNAME:PORT [VarAlias1,....]
-        // or using mission file defaults i.e file scope constants
-        //SHARE = [VAR1,VAR2,VAR3,....] -> COMMUNITYNAME@HOSTNAME:PORT [VarAlias1,....]
-        string sCmd = MOOSChomp(sLine,"=");
+    for(q = sParams.begin();q!=sParams.end();q++) {
+      string original_line = *q;
+      string sLine = *q;
+      // NB is alias's aren't specified the sink name is the source
+      // name also you don't need as many alias's as sources...
+      // SHARE = COMMUNITYNAME@HOSTNAME:PORT [VAR1,VAR2,VAR3,....] ->
+      // COMMUNITYNAME@HOSTNAME:PORT [VarAlias1,....]  or using mission
+      // file defaults i.e file scope constants SHARE =
+      // [VAR1,VAR2,VAR3,....] -> COMMUNITYNAME@HOSTNAME:PORT [VarAlias1,....]
+      string sCmd = MOOSChomp(sLine,"=");
         
-        if(MOOSStrCmp(sCmd,"SHARE") || MOOSStrCmp(sCmd,"UDPSHARE") )
-        {
-            bool bUDP = MOOSStrCmp(sCmd,"UDPSHARE");
-            
-            string sSrc = MOOSChomp(sLine,"->");
-            string sDest = sLine;
-            
-            string sSrcCommunity =m_sLocalCommunity ;
-            string sSrcCommunityHost = sLocalHost;
-            string sSrcCommunityPort = sLocalPort;
-            if(sSrc[0]=='[')
-            {
-                
-                //tell user what we are doing - this is the short-hand set up...
-                MOOSTrace("Using abbreviated configuration protocol Source: %s@%s:%s\n",
-                          sSrcCommunity.c_str(),
-                          sSrcCommunityPort.c_str(),
-                          sSrcCommunityHost.c_str());
-                
-                
-                MOOSChomp(sSrc,"[");
-            }
-            else
-            {
-                sSrcCommunity = MOOSChomp(sSrc,"@");
-                sSrcCommunityHost = MOOSChomp(sSrc,":");            
-                sSrcCommunityPort = MOOSChomp(sSrc,"[");
-            }
-            
-            string sVars =MOOSChomp(sSrc,"]"); 
-            
-            string sDestCommunity = MOOSChomp(sDest,"@");
-            string sDestCommunityHost = MOOSChomp(sDest,":");            
-            string sDestCommunityPort = MOOSChomp(sDest,"[");
-            string sAliases = MOOSChomp(sDest,"]");
-            
-            //look for loopback - not always wanted
-            if(MOOSStrCmp(sDestCommunityHost,sSrcCommunityHost) && 
-               MOOSStrCmp(sDestCommunityPort,sSrcCommunityPort))
-            {
-                if(bAllowLoopBack==false)
-                {
-                    MOOSTrace("\t Ignoring Loop Back - (bridge not built)\n");
-                    continue;
-                }
-            }
-            
-            //convert to numeric after format checking
-            long lSrcPort=0;
-            if(sSrcCommunity.empty() || sSrcCommunityHost.empty() ||sSrcCommunityPort.empty())
-            {
-                MOOSTrace("error on SHARED configuration %s\n correct line format is \nSHARE = COMMUNITYNAME@HOSTNAME:PORT [VAR1,VAR2,VAR3,....] -> COMMUNITYNAME@HOSTNAME:PORT\n",q->c_str());        
-                continue;
-            }
-            else
-            {
-                lSrcPort = atoi(sSrcCommunityPort.c_str());            
-            }
-            
-            long lDestPort=0;
-            if(sDestCommunity.empty() || sDestCommunityHost.empty() ||sDestCommunityPort.empty())
-            {
-                MOOSTrace("error on SHARED configuration %s\n correct line format is \nSHARE = COMMUNITYNAME@HOSTNAME:PORT [VAR1,VAR2,VAR3,....] -> COMMUNITYNAME@HOSTNAME:PORT\n",q->c_str());        
-                continue;
-            }
-            else
-            {
-                lDestPort = atoi(sDestCommunityPort.c_str());            
-            }
-            
-            //we will force all broadcast address directives to be the same "community" called "ALL"
-            if(MOOSStrCmp(sDestCommunityHost, "BROADCAST") || MOOSStrCmp(sDestCommunity, "ALL"))
-            {
-                //this is trixksy - need to qualify this generic address with the a port so each Bridge can
-                //UDP broadcast to multiple addresses
-                sDestCommunity="ALL";
-                sDestCommunityHost = "BROADCAST-"+sDestCommunityPort;
-            }
-            
-            //make two communities (which will be bridged)
-            CMOOSCommunity* pSrcCommunity =  GetOrMakeCommunity(sSrcCommunity);
-            
-            CMOOSCommunity* pDestCommunity =  GetOrMakeCommunity(sDestCommunity);
-            
-            if(!bUDP)
-            {
-                //depending on what kind of share this is we may want to simply specify
-                //a UDP end point or start a MOOS client
-                
-                //we will register with each DB with a unique name
-                std::string sFullyQualifiedMOOSName = m_MissionReader.GetAppName()+"@"+m_sLocalCommunity;
-
-                
-                //for (connecting to) the source community (where messages come from)
-                if(!pSrcCommunity->IsMOOSClientRunning())
-                {
-                	pSrcCommunity->InitialiseMOOSClient(sSrcCommunityHost,
-                                                        lSrcPort,
-                                                        sFullyQualifiedMOOSName,
-                                                        m_nBridgeFrequency);
-                }
-                
-                //for (connecting to) the destination community (where messages go to)
-                if(!pDestCommunity->IsMOOSClientRunning())
-                {
-                	pDestCommunity->InitialiseMOOSClient(sDestCommunityHost,
-                                                         lDestPort,
-                                                         sFullyQualifiedMOOSName,
-                                                         m_nBridgeFrequency);
-                }
-                
-            }
-            else
-            {
-                //MOOSTrace("Setting UDP port for community %s as %s:%d\n",pDestCommunity->GetCommunityName().c_str(),sDestCommunityHost.c_str(),lDestPort);
-                if(sDestCommunityHost.find("BROADCAST-")!=std::string::npos  && MOOSStrCmp(sDestCommunity,"ALL"))
-                {
-                    //this is special
-                    pDestCommunity->SetUDPInfo("255.255.255.255", lDestPort);                
-                }
-                else
-                {
-                	pDestCommunity->SetUDPInfo(sDestCommunityHost, lDestPort);                
-                }
-            }
-            
-            //populate bridge with variables to be shared (including translation)
-            if(pSrcCommunity && pDestCommunity)
-            {
-                string sVar = MOOSChomp(sVars,",");
-                while(!sVar.empty())
-                {
-                    pSrcCommunity->AddSource(sVar);
-                    CMOOSCommunity::SP Index(sVar,pSrcCommunity->GetCommunityName() );
-                    pDestCommunity->AddSink(Index,MOOSChomp(sAliases,","));
-                    
-                    if(bUDP)
-                    {
-                        //we need to store in the Bridge class what variables appearing in our
-                        //local community we are asked to forward on via UDP to some other
-                        //commnity
-                    	m_UDPShares.insert(Index);
-                    }
-                    
-                    //suck another VAR
-                    sVar =  MOOSChomp(sVars,",");
-                }
-            }                        
-        }
+      if(MOOSStrCmp(sCmd,"SHARE") || MOOSStrCmp(sCmd,"UDPSHARE") ) {
+	bool   bUDP = MOOSStrCmp(sCmd,"UDPSHARE");
+	string sSrc = MOOSChomp(sLine,"->");
+	string sDest = sLine;
+
+	string sSrcCommunity = m_sLocalCommunity ;
+	string sSrcCommunityHost = sLocalHost;
+	string sSrcCommunityPort = sLocalPort;
+	if(sSrc[0]=='[') {
+	  //tell user what we are doing - this is the short-hand set up...
+	  MOOSTrace("Using abbreviated configuration protocol Source: %s@%s:%s\n",
+		    sSrcCommunity.c_str(),
+		    sSrcCommunityPort.c_str(),
+		    sSrcCommunityHost.c_str());
+	  MOOSChomp(sSrc,"[");
+	}
+	else {
+	  sSrcCommunity = MOOSChomp(sSrc,"@");
+	  sSrcCommunityHost = MOOSChomp(sSrc,":");
+	  sSrcCommunityPort = MOOSChomp(sSrc,"[");
+	}
+	string sVars =MOOSChomp(sSrc,"]");
         
+	string sDestCommunity     = MOOSChomp(sDest,"@");
+	string sDestCommunityHost = MOOSChomp(sDest,":");
+	string sDestCommunityPort = MOOSChomp(sDest,"[");
+	string sAliases = MOOSChomp(sDest,"]");
+
+	bool ok = ConfigureLine(sSrcCommunity, sSrcCommunityHost,
+				sSrcCommunityPort, sVars, sDestCommunity,
+				sDestCommunityHost, sDestCommunityPort, sAliases, bUDP);
+	if(!ok) {
+	  MOOSTrace("error on SHARED configuration %s\n correct line format is \n",
+		    original_line.c_str());
+	  MOOSTrace("SHARE = COMMUNITYNAME@HOSTNAME:PORT [VAR1,VAR2,VAR3,....] -> COMMUNITYNAME@HOSTNAME:PORT\n");
+	  continue;
+	}
+      }
     }
-    
     ///think about setting up UDP connections....there is one UDP Link per instance of a 
     //MOOSBridge. If poepl wnat UDP bridging they need on pMOOSBridge per community (ie the 
     //toplogy of N communities and just 1 bridge is not allowed
     int nLocalUDPPort = DEFAULT_UDP_PORT;
-	if(m_MissionReader.GetConfigurationParam("UDPListen",nLocalUDPPort)   )
-    {
-        //start the UDP listener
-        m_UDPLink.Run(nLocalUDPPort);
-
+    if(m_MissionReader.GetConfigurationParam("UDPListen",nLocalUDPPort)) {
+      //start the UDP listener
+      m_UDPLink.Run(nLocalUDPPort);
+      m_Comms.Notify("PMB_UDP_LISTEN", nLocalUDPPort);
     }
-	else
-	{
-        MOOSTrace("warning no UDPListen port specified for local community - outgoing UDP comms only\n");
-        
-        //passing run with a -1 port means build the socket but don't bind or start a listen thread
-        m_UDPLink.Run(-1);
+    else {
+      MOOSTrace("warning no UDPListen port specified for local community - outgoing UDP comms only\n");
+
+      //passing run with a -1 port means build the socket but don't bind or start a listen thread
+      m_UDPLink.Run(-1);
     }
     //ensure we have at least the local MOOS-enabled community in existence - maybe all we want to do is map LocalMOOS->UDP_Out
     CMOOSCommunity * pLocalCommunity  = GetOrMakeCommunity(m_sLocalCommunity);
-    
-    if(pLocalCommunity!=NULL && !pLocalCommunity->IsMOOSClientRunning())
-    {
-        //make a connection to the local DB
-        pLocalCommunity->InitialiseMOOSClient(sLocalHost, 
-                                              atoi(sLocalPort.c_str()),
-                                              m_MissionReader.GetAppName(),
-                                              m_nBridgeFrequency);
+
+#if 1
+    if(pLocalCommunity!=NULL && !pLocalCommunity->IsMOOSClientRunning()) {
+      //make a connection to the local DB
+      pLocalCommunity->InitialiseMOOSClient(sLocalHost,
+					    atoi(sLocalPort.c_str()),
+					    m_MissionReader.GetAppName()+"foo",
+					    m_nBridgeFrequency);
     }
-    
+#endif
     return true;
 }
 
+//----------------------------------------------------------------
+// Procedure: ConfigureLine
+
+bool CMOOSBridge::ConfigureLine(string src_community,
+				string src_community_host,
+				string src_community_port,
+				string src_vars,
+				string dest_community,
+				string dest_community_host,
+				string dest_community_port,
+				string dest_aliases,
+				bool   use_udp)
+{
+  //look for loopback - not always wanted
+  if(MOOSStrCmp(dest_community_host, src_community_host) &&
+     MOOSStrCmp(dest_community_port, src_community_port)) {
+    if(m_bAllowLoopBack==false) {
+      MOOSTrace("\t Ignoring Loop Back - (bridge not built)\n");
+      return(false);
+    }
+  }
+
+  //convert to numeric after format checking
+  if(src_community.empty() || src_community_host.empty() || src_community_port.empty())
+    return(false);
+  if(dest_community.empty() || dest_community_host.empty() || dest_community_port.empty())
+    return(false);
+
+  long lSrcPort = atoi(src_community_port.c_str());
+  long lDestPort = atoi(dest_community_port.c_str());
+
+
+  //we will force all broadcast address directives to be the same "community" called "ALL"
+  if(MOOSStrCmp(dest_community_host, "BROADCAST") || MOOSStrCmp(dest_community, "ALL")) {
+    //this is trixksy - need to qualify this generic address with the a port so each Bridge can
+    //UDP broadcast to multiple addresses
+    dest_community="ALL";
+    dest_community_host = "BROADCAST-"+dest_community_port;
+  }
+
+  //make two communities (which will be bridged)
+  CMOOSCommunity* pSrcCommunity  = GetOrMakeCommunity(src_community);
+  CMOOSCommunity* pDestCommunity = GetOrMakeCommunity(dest_community);
+
+  if(!use_udp) {
+    // depending on what kind of share this is we may want to simply specify
+    // a UDP end point or start a MOOS client
+    // we will register with each DB with a unique name
+    std::string sFullyQualifiedMOOSName = m_MissionReader.GetAppName()+"@"+m_sLocalCommunity;
+
+    //for (connecting to) the source community (where messages come from)
+    if(!pSrcCommunity->IsMOOSClientRunning()) {
+      pSrcCommunity->InitialiseMOOSClient(src_community_host,
+					  lSrcPort,
+					  sFullyQualifiedMOOSName,
+					  m_nBridgeFrequency);
+    }
+
+    // for (connecting to) the destination community (where messages go to)
+    if(!pDestCommunity->IsMOOSClientRunning()) {
+      pDestCommunity->InitialiseMOOSClient(dest_community_host,
+					   lDestPort,
+					   sFullyQualifiedMOOSName,
+					   m_nBridgeFrequency);
+    }
+  }
+  else {
+    // MOOSTrace("Setting UDP port for community %s as %s:%d\n",pDestCommunity->GetCommunityName().c_str(),
+    // dest_community_host.c_str(),lDestPort);
+    if(dest_community_host.find("BROADCAST-")!=std::string::npos  && MOOSStrCmp(dest_community,"ALL")) {
+      //this is special
+      pDestCommunity->SetUDPInfo("255.255.255.255", lDestPort);
+    }
+    else {
+      pDestCommunity->SetUDPInfo(dest_community_host, lDestPort);
+    }
+  }
+
+  //populate bridge with variables to be shared (including translation)
+  if(pSrcCommunity && pDestCommunity) {
+    string sVar = MOOSChomp(src_vars,",");
+    while(!sVar.empty()) {
+      pSrcCommunity->AddSource(sVar);
+      CMOOSCommunity::SP Index(sVar,pSrcCommunity->GetCommunityName() );
+      pDestCommunity->AddSink(Index,MOOSChomp(dest_aliases,","));
+
+      if(use_udp) {
+	//we need to store in the Bridge class what variables appearing in our
+	//local community we are asked to forward on via UDP to some other
+	//commnity
+	m_UDPShares.insert(Index);
+      }
+
+      //suck another VAR
+      sVar =  MOOSChomp(src_vars,",");
+    }
+  }
+  return(true);
+}
+
 
+//----------------------------------------------------------------
+// Procedure: GetOrMakeCommunity
 
 CMOOSCommunity * CMOOSBridge::GetOrMakeCommunity(const string &sCommunity)
 {
-    CMOOSCommunity* pCommunity = NULL;
-    COMMUNITY_MAP::iterator p = m_Communities.find(sCommunity);
-    if(p==m_Communities.end())
-    {
-        pCommunity = new CMOOSCommunity;
-        pCommunity->Initialise(sCommunity);
-        m_Communities[sCommunity] = pCommunity;
-    }
-    else
-    {
-        pCommunity = p->second;
-    }
-    
-    return pCommunity;
+  CMOOSCommunity* pCommunity = NULL;
+  COMMUNITY_MAP::iterator p = m_Communities.find(sCommunity);
+  if(p==m_Communities.end()) {
+    pCommunity = new CMOOSCommunity;
+    pCommunity->Initialise(sCommunity);
+    m_Communities[sCommunity] = pCommunity;
+  }
+  else
+    pCommunity = p->second;
+
+  return pCommunity;
 }
+
--- a/Essentials/pMOOSBridge/MOOSBridge.h
+++ b/Essentials/pMOOSBridge/MOOSBridge.h
@@ -33,28 +33,44 @@
 #include <MOOSLIB/MOOSLib.h>
 #include "MOOSCommunity.h"
 
-class CMOOSBridge
+class CMOOSBridge : public CMOOSApp
 {
 public:
-
-    bool Configure();
     CMOOSBridge();
-    virtual ~CMOOSBridge();
-    bool Run(const std::string & sMissionFile,const std::string & sMOOSName);
+    virtual ~CMOOSBridge() {};
+
+    bool OnNewMail(MOOSMSG_LIST &NewMail);
+    bool Iterate();
+    bool OnStartUp();
+    bool OnConnectToServer();
 
 protected:
-    CMOOSCommunity * GetOrMakeCommunity(const std::string & sCommunity);
+    void RegisterVariables();
     bool MarshallLoop();
     bool IsUDPShare(CMOOSCommunity::SP & Index);
+    bool Configure();
+    bool ConfigureLine(std::string src_community,
+		       std::string src_community_host,
+		       std::string src_community_port,
+		       std::string src_vars,
+		       std::string dest_community,
+		       std::string dest_community_host,
+		       std::string dest_community_port,
+		       std::string dest_aliases,
+		       bool use_udp=true);
+    CMOOSCommunity * GetOrMakeCommunity(const std::string & sCommunity);
     
     typedef std::map<std::string,CMOOSCommunity*> COMMUNITY_MAP;
     COMMUNITY_MAP m_Communities;
 
-    CProcessConfigReader m_MissionReader;
+    // Don't need one now because we inherit from CMOOSApp
+    // CProcessConfigReader m_MissionReader;
 
     int m_nBridgeFrequency;
     std::string m_sLocalCommunity;
 
+    bool m_bAllowLoopBack;
+
     CMOOSUDPLink m_UDPLink;
     
     std::set< CMOOSCommunity::SP > m_UDPShares;
--- a/Essentials/pMOOSBridge/MOOSBridgeMain.cpp
+++ b/Essentials/pMOOSBridge/MOOSBridgeMain.cpp
@@ -31,10 +31,6 @@
 #include <MOOSLIB/MOOSLib.h>
 #include "MOOSBridge.h"
 
-
-
-
-
 int main(int argc,char* argv[])
 {
     //Test();
@@ -54,7 +50,8 @@
 
     CMOOSBridge TheBridge;
 
-    TheBridge.Run(sMissionFile,sMOOSName);
+    //TheBridge.Run(sMissionFile,sMOOSName);
+    TheBridge.Run(sMOOSName, sMissionFile);
 
     return 0;
 }
--- a/Essentials/pMOOSBridge/MOOSCommunity.h
+++ b/Essentials/pMOOSBridge/MOOSCommunity.h
@@ -43,49 +43,49 @@
 
 class CMOOSCommunity  
 {
-public:
-    typedef std::pair<std::string,std::string> SP;
+ public:
+  typedef std::pair<std::string,std::string> SP;
 
-    std::string GetFormattedName();
-    std::string GetCommsName();
-    std::string GetCommunityName();
-    std::string GetUDPHost();
-
-    bool DoRegistration();
-    bool Initialise(const std::string & sCommunityName);
-    
-    bool InitialiseMOOSClient( const std::string &sHostName,
-                              long nPort,
-                              const std::string & sMOOSName,
-                              int nFreq);
-    
-    bool AddSource(const std::string & sStr);
-    bool AddSink(const SP & sIndex,const std::string & sAlias);
-    bool WantsToSink(const SP & sIndex);
-    std::string GetAlias(const SP & sIndex);
-    CMOOSCommunity();
-    virtual ~CMOOSCommunity();
-	bool Fetch(MOOSMSG_LIST & Mail) ;
-    bool Post(CMOOSMsg & M);
-    bool SetUDPInfo(const std::string & sHost, int nPort);
-    bool IsMOOSClientRunning();
-    int GetUDPPort();
-    bool HasUDPConfigured() const;
-    bool HasMOOSSRegistration(const std::string & sVariable);
-    
-protected:
-    CMOOSCommClient m_CommClient;
-
-    std::set<std::string> 		m_Sources;
-    std::map<SP,std::string> 	m_Sinks;
-    
-    std::string m_sCommunityName;
-    int m_nSharedFreq;
-    
-    bool m_bMOOSClientRunning;
-    
-	std::string	m_sUDPHost;
-    int m_nUDPPort;
+  std::string GetFormattedName();
+  std::string GetCommsName();
+  std::string GetCommunityName();
+  std::string GetUDPHost();
+
+  bool DoRegistration();
+  bool Initialise(const std::string & sCommunityName);
+
+  bool InitialiseMOOSClient( const std::string &sHostName,
+			     long nPort,
+			     const std::string & sMOOSName,
+			     int nFreq);
+
+  bool AddSource(const std::string & sStr);
+  bool AddSink(const SP & sIndex,const std::string & sAlias);
+  bool WantsToSink(const SP & sIndex);
+  std::string GetAlias(const SP & sIndex);
+  CMOOSCommunity();
+  virtual ~CMOOSCommunity();
+  bool Fetch(MOOSMSG_LIST & Mail) ;
+  bool Post(CMOOSMsg & M);
+  bool SetUDPInfo(const std::string & sHost, int nPort);
+  bool IsMOOSClientRunning();
+  int GetUDPPort();
+  bool HasUDPConfigured() const;
+  bool HasMOOSSRegistration(const std::string & sVariable);
+
+ protected:
+  CMOOSCommClient m_CommClient;
+
+  std::set<std::string> 		m_Sources;
+  std::map<SP,std::string> 	m_Sinks;
+
+  std::string m_sCommunityName;
+  int m_nSharedFreq;
+
+  bool m_bMOOSClientRunning;
+
+  std::string	m_sUDPHost;
+  int m_nUDPPort;
 
 };
 
--- a/Essentials/pMOOSBridge/MOOSUDPLink.cpp
+++ b/Essentials/pMOOSBridge/MOOSUDPLink.cpp
@@ -136,7 +136,7 @@
             {
             	if(P.Serialize(m_InBox,false))
                 {
-                	MOOSTrace("%d MOOSMsg's held\n",m_InBox.size());
+		  //MOOSTrace("%d MOOSMsg's held\n",m_InBox.size()); // turned off by mikerb
                 }
                 else
                 {
--- a/Essentials/pScheduler/MOOSScheduler.cpp
+++ b/Essentials/pScheduler/MOOSScheduler.cpp
@@ -203,8 +203,17 @@
                 continue;
 
             //get the names
+
+#if 1 // Fix by mikerb
+            string sNameVal = MOOSChomp(sVal,":");
+            string sName = MOOSChomp(sNameVal,"@");
+#endif
+
+#if 0 // Erroneous. fixed with above by mikerb
             string sName = MOOSChomp(sVal,":");
             string sNameVal = MOOSChomp(sVal,"@");
+#endif
+
             if(sVal.empty())
             {
                 MOOSTrace("Missing time in sequence setting!");
